Spring Introduction
+ It is a framework 
+ Benefits 
	Simpler
	Light weight 
	Implementation becomes easier
	Unit testing is simple
	Loosely Coupled Components 
IDE - Eclipse (Java EE Developer) / STS - Spring Tools Suite
IoC - Inversion Of Control (Dependency Injection) 
ex: 
Stock - id 
+ id 
Inventory - name, stock  
+ Product Info
+ Stock 
+ Merchant Info 
Product - inventory
+ Id 
+ Name 
+ Price 
+ Inventory  i = new Inventory();(metadata)


POM - Project Object Management 

Steps: 
1. File -> New Maven Project -> Check Create a Simple Project 
2. group id - com.training, artifact id - spring-demo -> Finish
3. Visit https://mvnrepository.com/
4. Search spring context and select the version 
5. copy the maven dependency
6. In the maven project add <depenencies> tag then paste the maven dependency
Central Repo - https://mvnrepository.com/
Local Repo - C:\Users\Admin\.m2\repository

Doc - https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html

ClassPathXmlApplicationContext - Supports Eager Loading - Beans are created at the start and it is available for use
BeanFactory - Supports Lazy Loading - Beans are created whenever required. It is deprecated

Bean Scope - lifetime
Spring Context 
+ Singleton - default  - caches the bean and gives the same reference for all the sub-sequent request 
+ Prototype - does not cache and gives a unique bean for every request 
Web Context - Web Application  
+ Request
+ Session 

3 Different Config 
+ XML - hard 
+ annotation - @Inject, @Autowired, @Component, @Controller
+ java config - separate java class file @Configuration, @Bean 

Collect the recent problems 2 years problems(geeks,hacker)
simple 
medium
complex 
weak 
+ 2 s + 2 m + 1 c
+ could break the problems (top-down/bottom-up) 

ds & alg
narrow vs deep 
+ list - 5 problems 
+ tree - 5 problems 
+ list, tree, graph, map, table - 20


+ Fresher  No Java - 250 problems on java oops, fundamentals, collection
+ Little Experience on Java - 500  


